<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>